<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>